<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>